<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>